<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>